<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>